<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>